<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>